<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>